<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>